<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>